<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>